<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>